<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>